<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>